<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>